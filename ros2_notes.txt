Link for the video: https://www.youtube.com/watch?v=HJAE5Pk8Nyw&list=WL&index=287&ab_channel=KevinWood%7CRobotics%26AI 



ros2 run turtlesim turtlesim_node -> runs a premade node with a turtle gui 

ros2 run turtlesim turtle_teleop_key -> allows you to create a client server connection from one node to the other

ros2 has built-in executable packages 

ros2 pkg list -> shows you the list of packages

ros2 pkg executables turtlesim -> executable packages for turtlesim


node <-> topics, services, actions <-> node

ros2 node list -> list of the current nodes running

/turtlesim is a node

ros2 node info /turtlesim -> gives us info about the /turtlesim node




node (publisher) - topics - node (subscriber)

subscribes to topic to recieve data by the publisher

ros2 topic list -> shows all the topics available (for example: /turtle1/cmd_vel, /turtle1/pose, etc.)

with -t, we can see the type that is associated with the topic

rqt_graph shows a graph of your topic/node created system 

Between /turtlesim and /teleop_turtle there are topics like /turtle1/rotate_absolute that make the turtle rotate_absolute

ros2 topic echo <topic_name> gives us the output type of the topic selected

If we do it with /turtle1/pose while the turtle is moving, it will show in real time the instantaneous positions of the turtle

ros2 topic info <topic_name> gives us info about the topic 

ros2 interface show <type> shows the interface definition of the given type 

You can publish data to a topic using this command:

ros2 topic pub --once <topic_name> <type> "<args of the type>"

change the once to --rate <x> if you want to publish data to a topic at a specific rate 

ros2 topic hz <topic_name> -> shows us the topic frequency

normally, we want to publish movements into a node




node (server) - service - node (client)

ros2 service list -> list of services available  add -t for types

ros2 service type <service_name> -> shows the type of a specified service

ros2 service find <service_type> -> find service by type

we can also run ros2 interface show <type> for service types

ros2 service call <service_name> <service_type> 

For example, ros2 service call /clear std_srvs/srv/Empty clears your current path in /turtlesim

normally, to modify the nodes (by adding, deleting, etc.) we use a service and not topics





We can pass multiple parameters into a node

These parameters include the background of the /turtlesim, the color of the turtle, etc.

ros2 param list -> shows a list of parameters

ros2 param get <node_name> <param_name> -> gives you the value of the parameter in the specified node

An example of a parameter is background-g

ros2 param set <node_name> <param_name> <value> -> changes the value of the parameter in the specified node

ros2 param dump <node_name> -> dumps all params of a node into the terminal

Add a > turtlesim.yaml to dump the params of the node into a .yaml file 

ros2 param load <node_name> <.yaml file_name> -> loads the specified params of your file into the current node

ros2 run turtlesim turtlesim_node --ros-args --params-file <file_name> -> runs the node with the specified params in the file 




node (server) - actions : goal, feedback, results - node (client)

ros2 action list -> shows all the current actions running  (add -t for action type)

ros2 action info <action_name> -> shows the info about the current actions 

An example would be: action clients: 1 /teleop_turtle action servers: 1 /turtlesim

ros2 action send_goal <action_name> <action_type> <goal>

A goal wuld be somethign like "{theta: 1.57}". This would rotate the turtle by that angle in radians




In ROS2, topics are used for continuous data streams, like sensor data or robot state,
while actions are used for long-running tasks that require feedback and cancellation, 
like moving a robot to a waypoint. Topics are asynchronous and unidirectional, while actions
offer feedback and are preemptable can be canceled in progress


To create your project, you want to mkdir and cd into the directory

You can git clone source code for ros2 if needed

use echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> ~/.bashrc to setup the tab completion of your workspace into bash

colcon build --symlink-install will create the needed files and folders in the directory

add the end, you do :

source install/local_setup.bash  to source overlay

Then, we can run the package that we created and we can modify it with the different files that contain it

To create your own package after having created your new workspace from the src folder, you do this:

ros2 pkg create --build-type ament_cmake --node-name <node_name> <package_name>

After creating our package we want to build it 

we go into the main workspace dir and we build it:

colcon build --packages-select <package_name> 

we source it:

source install/local_setup.bash 

and then we can run our own node :

ros2 run my_package my_node




We are also interested in creating our own publisher and subscriber package (that we can do in c++ or python)

to create a pub and sub package in your workspace, we do this:


A typical publisher has these modules:


#include <chrono>
#include <functional>
#include <memory>
#include <string>
#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"
using namespace std::chrono_literals;


you can run a dependency check with this command:

rosdep install -i --from-path src --rosdistro humble -y

and once you finish a package, you build it:

colcon build --packages-select <package_name>

at the end, there is going to be a talker and a listener



In one terminal you do 

source install/local_setup.bash 

ros2 run <package_name> talker

and on the other:

source install/local_setup.bash 

ros2 run <package_name> listener



You can launch different nodes directly with a python script instead of manually running all nodes on the terminal

ExecuteProcess allows you to run ros2 terminal commands directly from the lanch file

At the end, you return LaunchDescription with all of your nodes

To launch the file containing all the nodes you want to run, we do this command:

ros2 launch <package_name> <launch_file>

For example, we would do:

ros2 launch gazebo_tutorial gazebo.launch.py




URDF files 

It's a way to describe your specified robot

There are different properties likes rpy and rpz

Unified robotics description format

Visual, physics, connections, joints, links


It looks something like this:

<?xml version= "1.0"?>
<robot name= "robot_name">
    <link name= "link_name">
        <visual>
            <geometry>
            </geometry>
            <origin rpy= "r p y" xyz = "x y z"/>
            <material name= "color_name"/>
                <color rgba = "r g b a"/>
            <material/>
        </visual>

        <collision>
            <geometry>
            </geometry>
            <origin rpy= "r p y" xyz = "x y z"/>
        </collision>

        <inertial>
            <mass value= "mass_value_in_kg"/>
            <inertia
                ixx = "ixx" ixy = "ixy" ixz = "ixz"
                iyy = "iyy" iyz = "iyz"
                izz = "izz"/>
        </inertial>
    </link>

    <joint name= "joint_name" type= "joint_type"> 
        <parent link= "parent_link_name"/>
        <child link= "child_link_name"/>
        <origin rpy= "r p y" xyz= "x y z"/>
        <axis rpy= "r p y" xyz= "x y z"/>
        <limit lower= "lower" upper= "upper"
effort= "max_effort" velocity= "max_vel"/>
        <dynamics damping= "damping_coeff" friction= "fric_coeff"/>
    </joint>
</robot>



A link is used to describe a segment of a robot
You define visual, collision and inertial properties

The geometry and origin are used in the visual and collision properties
to describe the location and the shape of the link at those properties

You can export .stl files for the geometry

For geometry:

<box size= "x y z"/>
<sphere radius= "r"/>
<cylinder radius= "r" length= "l"/>

The mesh is used to import specific pieces that you have created in cad model software as .stl or .dae files.

<mesh filename = "file_path" scale = "x y z"/>


For the origin, to describe the rotation position, we use
roll (x) pitch (y) yaw (z) in radians

Relative to the link's coordinate frame

We apply rotation and then translation


For visual and collision, origin describes how the geometry is transformed
relative to the link's frame 

For inertial, origin describes the location of the center of mass
relative to the link's frame

Some common colors:

red is 1 0 0 1
blue is 0 0 1 1
green is 0 1 0 1
yellow is 1 1 0 1
cyan is 0 1 1 1

Inertia is in kgm^2

https://www.youtube.com/watch?v=Ch-VTxTIt0E&ab_channel=MichelvanBiezen 

This is the inertia matrix

We would launch the urdf using this command:

ros2 launch <package_name> <file_name> model:<urdf_file_path inside package> 

Example:

ros2 launch urdf_tutorial display_launch.py model:=urdf/01-simple-link.urdf

joints describe connections between two links: a parent link and a child link 

A damping coefficient, or damping constant, quantifies how quickly an oscillating system returns to equilibrium due to energy dissipation
Damping is expressed in N s/m

These are the types of joints:

fixed: no movement
continuous: rotation about axis, no limit
revolute: rotation about axis, with limits in radians
prismatic: translation about axis
floating: six degrees of freedom (3 translational 3 rotational)
planar: motion on plan (2 translation and 1 rotation)

Degrees of freedom video:

https://www.youtube.com/watch?v=ah7Wm0FHKvI&ab_channel=Mecharithm-RoboticsandMechatronics

Refer to this repo for ros2 simulation examples:

https://github.com/madibabaiasl 

Limits are for prismatic revolute joints only

Lower and upper fields are in radians or meters

effort: max effort in Nm 
velocity: max velocity rad/s

Example of a robot: 16 links and 15 joints




Xacro files

Function that you can call inside urdf files

The files would have this form: .xacro.urdf

convert .xacro files into .urdf files

robot state publisher:

path_to_urdf = ....

robot_state_publisher_node = launch_ros.actions.Node(
    package = 'robot_state_publisher',
    executable = 'robot_state_publisher',
    parameters = [{
        'robot_description': ParameterValue(
            Command(['xacro ', str(path_to_urdf)]),
value_type=str
        )
    }]


)

Inside the parameter, we run the xacro command to turn the .xacro file into a .urdf file

Xacro properties allow you to change a property that appears in multiple locations inside of a .urdf file 

<xacro:property name= "property_name" value = "..."/>

to use the property, we would implement it like this:

<... variable = "${property_name}" .../>

You can set up input parameters, which can replace multiple lines of xml code.

<xacro:macro name= "macro_name" params= "param-1 param-2 ... param-n"/>

</xacro:macro>

To use it, we would do:

<xacro:macro_name param1= "value"/>

ros2 launch urdf_tutorial display.launch.py model:=<urdf xacrofile name>

You can also do a separate .xacro file and include its properties in the .urdf.xacro file

<?xml version= "1.0"?>

<robot name = "my_robot" xmlns:xacro = "http://ros.org/wiki/xacro"> 

Then, you put all your xacro properties

then, you put all the xacro macros 

and </robot> at the end

To use the xacro file in the main urdf.xacro file, we put this:

<xacro:include filename= "filename.xacro" />


Rviz lets you vizualize the motion of the robot 

Don't forget to set your path to real path like this:

ros2 launch urdf_tutorial display.launch.py model:=$(realpath ~/ros2_ws/src/mec_mobile/mec_mobile_description/urdf/robots/robot_3d.urdf.xacro)

and before launching, always do:

colcon build --packages-select <package_name>

source install/setup.bash 

You can test that everything works using:

ros2 pkg list | grep <description_file_name>

There are different types of .py files that are needed to launch a simulation 

demo.launch.py 

robot_state_publisher and state_publisher.py 

There is also a setup.py 

To launch an rviz simulation, we do:

rviz2 -d install(directory to .rviz file)


Normally, you create a package and then you modify the CMakeLists.txt and Package.xml files




Installing gazebo and ros2 control

Ros2 control yaml file and join publisher file to control the robot in gazebo 

Types of ros2 controllers to make your robot move in gazebo :

effort_controllers position_controllers velocity_controllers

state_interface reads data 

command_interface sends data 

position, velocity, effort

example using ros2_control and gazebo

<?xml version = "3.0"?>

<!-- The links and joints would go here> 

<gazebo reference = "ref_1">
    <material>Gazebo/White</material>
</gazebo>

<gazebo material = "ref_2">
    <material>Gazebo/Black</material>
</gazebo>

<robot name = "robot" xmlns:xacro = "http://ros.org/wiki/xacro">
    <ros2_control name = "GazeboSystem" type = "system">
        <hardware>
            <plugin>gazebo_ros2_control/GazeboSystem</plugin> 
        </hardware>

        <joint name = "joint_name">
            <command_interface name = "interface_name">
                <param></param>
            </command_interface>

            <state_interface name = "interface_name">
                <param></param>
            </state_interface>
        </joint>

    </ros2_control>

    <gazebo>
        <plugin filename = "libgazebo_ros2_control.so name = "gazebo_ros2_control">
            <parameters>$(find gazebo_tutorial)/config/joint_controller.yaml</parameters>
        </plugin>
    </gazebo>
</robot>
    
So you declare and set the parameters for the joints and then you want to set control with ros2 control for those same joints
with command interface and state interface

<param> states values 

Yaml file example:

controller manager:
  ros__parameters:
    update_rate: 100 #Hz

    joint_trajectory_controller: 
      type: joint_trajectory_controller/JointTrajectoryController

    joint_state_broadcaster:
      type: joint_state_broadcaster/JoinStateBroadcaster


joint_trajectory_controller:
  ros__parameters:
    joints:
      -
      -
      -
      -
    interface_name: position
    command_interfaces:
      - position 
    state_interfaces:
      - position
      - velocity

We also need to create a joint_publisher.cpp file

So you launch first with the gazebo.launch.py file and then with the joint_publisher.cpp file


Using Plotjuggler

sudo apt install ros-humble-plotjuggler
sudo apt install ros-humble-plotjuggler-ros

ros2 run plotjuggler plotjuggler

or 

run_plotjuggler = ExecuteProcess(
    cmd = ['ros2', 'run', 'plotjuggler', 'plotjuggler'],
    output = 'screen',
    shell = True
)

graphs are saved as a xml file

You can save and load plot layouts used

